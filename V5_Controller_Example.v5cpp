{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftMotorGroupMotorA = motor(PORT1, ratio18_1, false);\nmotor LeftMotorGroupMotorB = motor(PORT9, ratio18_1, true);\nmotor_group LeftMotorGroup = motor_group(LeftMotorGroupMotorA, LeftMotorGroupMotorB);\n\nmotor RightMotorGroupMotorA = motor(PORT2, ratio18_1, false);\nmotor RightMotorGroupMotorB = motor(PORT10, ratio18_1, true);\nmotor_group RightMotorGroup = motor_group(RightMotorGroupMotorA, RightMotorGroupMotorB);\n\ncontroller Controller1 = controller(primary);\nmotor ArmMotor = motor(PORT4, ratio18_1, false);\n\nmotor ClawMotor = motor(PORT5, ratio18_1, false);\n\nmotor LiftMotor = motor(PORT6, ratio18_1, false);\n\nmotor IntakerMotor = motor(PORT7, ratio18_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  LeftMotorGroup.setVelocity(0.0, percent);\n  RightMotorGroup.setVelocity(0.0, percent);\n  ArmMotor.setVelocity(50.0, percent);\n  ClawMotor.setVelocity(50.0, percent);\n  LiftMotor.setVelocity(50.0, percent);\n  while (true) {\n    LeftMotorGroup.spin(forward);\n    LeftMotorGroup.spin(forward);\n    LeftMotorGroup.setVelocity(Controller1.Axis3.position(), percent);\n    RightMotorGroup.setVelocity(Controller1.Axis2.position(), percent);\n    if (Controller1.ButtonR1.pressing()) {\n      ArmMotor.spin(forward);\n    }\n    else {\n      ArmMotor.stop();\n    }\n    if (Controller1.ButtonR2.pressing()) {\n      ArmMotor.spin(reverse);\n    }\n    else {\n      ArmMotor.stop();\n    }\n    if (Controller1.ButtonL1.pressing()) {\n      LiftMotor.spin(forward);\n    }\n    else {\n      LiftMotor.stop();\n    }\n    if (Controller1.ButtonL2.pressing()) {\n      LiftMotor.spin(reverse);\n    }\n    else {\n      LiftMotor.stop();\n    }\n    if (Controller1.ButtonUp.pressing()) {\n      ClawMotor.spin(forward);\n    }\n    else {\n      ClawMotor.stop();\n    }\n    if (Controller1.ButtonDown.pressing()) {\n      ClawMotor.spin(reverse);\n    }\n    else {\n      ClawMotor.stop();\n    }\n    if (Controller1.ButtonA.pressing()) {\n      IntakerMotor.spin(forward);\n    }\n    else {\n      IntakerMotor.stop();\n    }\n    if (Controller1.ButtonB.pressing()) {\n      IntakerMotor.spin(reverse);\n    }\n    else {\n      IntakerMotor.stop();\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[1,9],"name":"LeftMotorGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"앞으로","rev":"반대로","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2,10],"name":"RightMotorGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"앞으로","rev":"반대로","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[4],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"앞으로","rev":"반대로","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"앞으로","rev":"반대로","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"LiftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"앞으로","rev":"반대로","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"IntakerMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"앞으로","rev":"반대로","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}